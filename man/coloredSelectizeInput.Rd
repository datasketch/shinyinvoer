% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input-coloredSelectize.R
\name{coloredSelectizeInput}
\alias{coloredSelectizeInput}
\title{Colored Selectize Input}
\usage{
coloredSelectizeInput(
  inputId,
  label = NULL,
  choices = NULL,
  selected = NULL,
  colors = NULL,
  placeholder = "Select options...",
  placeholderText = "",
  multiple = TRUE,
  reorder = FALSE,
  maxItems = NULL,
  minItems = NULL,
  width = NULL
)
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{label}{Display label for the control, or \code{NULL} for no label.}

\item{choices}{List of options. Can be a vector or named list.}

\item{selected}{The initially selected value(s).}

\item{colors}{Vector of colors for the selected items. If length 1, all items use the same color.
If length equals number of choices, each item gets its own color.}

\item{placeholder}{Character string giving the user a hint as to what can be typed into the control.}

\item{placeholderText}{Text to display with the icon when no items are selected.}

\item{multiple}{Is multiple selection allowed?}

\item{reorder}{Allow drag-and-drop reordering of selected items? (Only works when multiple=TRUE)}

\item{maxItems}{Maximum number of items that can be selected. If NULL, all available options can be selected.}

\item{minItems}{Minimum number of items that should be selected initially. If NULL, no items are selected by default.}

\item{width}{The width of the input, e.g. '400px', or '100\%'.}
}
\value{
A colored selectize input control that can be added to a UI definition.
}
\description{
A custom selectize input widget that allows custom background colors for selected options.
Similar to selectizeInput but with colored "chips" or "tags" for selected items.
}
\examples{
\dontrun{
## Only run examples in interactive R sessions
if (interactive()) {

# Example with iris dataset
ui <- fluidPage(
  coloredSelectizeInput(
    "iris_vars",
    "Select variables:",
    choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species"),
    colors = c("#ff6b6b", "#4ecdc4", "#45b7d1", "#96ceb4", "#feca57"),
    multiple = TRUE,
    placeholder = "Choose variables..."
  ),
  verbatimTextOutput("selected_vars")
)

server <- function(input, output, session) {
  output$selected_vars <- renderPrint({
    input$iris_vars
  })
}

shinyApp(ui, server)
}
}

}
