% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buttonImageInput.R
\name{buttonImageInput}
\alias{buttonImageInput}
\title{Button Image Input}
\usage{
buttonImageInput(
  inputId,
  label = NULL,
  images = NULL,
  active = NULL,
  disabled = NULL,
  tooltips = NULL,
  path = NULL,
  ncol = NULL,
  nrow = NULL,
  format = NULL,
  highlightColor = NULL,
  checkmark = FALSE,
  button_width = NULL,
  button_height = NULL,
  button_ar = NULL,
  layout = "flex",
  container_width = "100\%"
)
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{label}{Optional label for the input group.}

\item{images}{Named vector of image files. Names become tooltips, values are image filenames.}

\item{active}{Initial active button (image ID without extension).}

\item{disabled}{Vector of disabled button IDs.}

\item{tooltips}{Optional custom tooltips for each button.}

\item{path}{Directory path where images are stored.}

\item{ncol}{Number of columns in the grid layout.}

\item{nrow}{Number of rows in the grid layout.}

\item{format}{Image format (png, svg, etc.). Auto-detected if not specified.}

\item{highlightColor}{Color for highlighting active buttons.}

\item{checkmark}{Whether to show checkmark on active buttons.}

\item{button_width}{Width of buttons in pixels. Default: 60.}

\item{button_height}{Height of buttons in pixels. If NULL, uses button_width for square buttons.}

\item{button_ar}{Aspect ratio (width/height). If NULL, uses button_width and button_height.}

\item{layout}{Layout type: "flex" (default) or "grid". Use "grid" for nrow/ncol control, "flex" for natural flow.}

\item{container_width}{Width of the container. Can be CSS values like "300px", "50%", "auto", etc. Default: "100%".}
}
\value{
A Shiny input element that can be used in UI.
}
\description{
Create a group of buttons with images that can be selected individually.
Each button displays an image and can be configured with various styling options.
}
\details{
Button sizing can be controlled using 2 of 3 parameters:
\itemize{
  \item \code{button_width} and \code{button_height}: Explicit dimensions
  \item \code{button_width} and \code{button_ar}: Width with aspect ratio
  \item \code{button_height} and \code{button_ar}: Height with aspect ratio
  \item \code{button_width} only: Square buttons
  \item \code{button_height} only: Square buttons
  \item \code{button_ar} only: Uses default max width (100px)
}

Layout options:
\itemize{
  \item \code{layout = "flex"} (default): Buttons flow naturally to the next line when they run out of space. 
        Container width is 100\% by default but can be controlled with \code{container_width}.
  \item \code{layout = "grid"}: Uses CSS Grid layout. \code{nrow} and \code{ncol} parameters are required for this layout.
        Buttons stretch to fill the available space in the specified grid structure.
}
}
\examples{
\dontrun{
# Basic usage with square buttons
buttonImageInput(
  inputId = "chart_type",
  images = c("Map" = "map", "Pie" = "pie", "Bar" = "bar"),
  path = "www/icons",
  active = "map"
)

# Single row layout with custom sizing
buttonImageInput(
  inputId = "chart_type",
  images = c("Map" = "map", "Pie" = "pie", "Bar" = "bar"),
  path = "www/icons",
  button_width = 30,
  button_height = 30,
  nrow = 1,
  ncol = 3
)

# Rectangular buttons with aspect ratio
buttonImageInput(
  inputId = "chart_type",
  images = c("Map" = "map", "Pie" = "pie", "Bar" = "bar"),
  path = "www/icons",
  button_width = 40,
  button_ar = 1.5
)
}

}
